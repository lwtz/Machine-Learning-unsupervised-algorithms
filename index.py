# -*- coding: utf-8 -*-
"""Machine Learning - Introdução a algoritmos não supervisionados

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUJrQl2cTD0-15IWVLWCr13bNNpMsFzZ
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
import seaborn as sns
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage

local_csv = 'https://raw.githubusercontent.com/lwtz/Machine-Learning-unsupervised-algorithms/main/movies.csv'
filmes = pd.read_csv(local_csv)
# Se querer traduzir o nome das colunas
# filmes.columns = ['filme_id', 'titulo', 'generos']

generos = filmes.genres.str.get_dummies()
dados = pd.concat([filmes, generos], axis=1)

scaler = StandardScaler()
generos_scalados = scaler.fit_transform(generos)

modelo = KMeans(n_clusters=3).fit(generos_scalados)
print('Grupos {}'.format(modelo.labels_))

print(generos.columns)
print(modelo.cluster_centers_)

grupoDataframe = pd.DataFrame(modelo.cluster_centers_,
             columns=generos.columns)

grupoDataframe.transpose().plot.bar(subplots=True, 
                        figsize=(25,25),
                        sharex=False)

grupo = 1
filtro = modelo.labels_ == grupo
dados[filtro].sample(5)

tsne = TSNE()

visu = tsne.fit_transform(generos_scalados)
visu

sns.set(rc={'figure.figsize': (13,13)})

sns.scatterplot(x=visu[:,0],
                y=visu[:,1],
                hue=modelo.labels_,
                palette=sns.color_palette("Set1", 3))

modelo = KMeans(n_clusters=20)
modelo.fit(generos_scalados)

grupos = pd.DataFrame(modelo.cluster_centers_,
             columns=generos.columns)

grupos.transpose().plot.bar(subplots=True, 
                        figsize=(25,50),
                        sharex=False,
                        rot=0)

grupo = 16
filtro = modelo.labels_ == grupo
dados[filtro].sample(5)

def help(numero_clusters, generos):
  modelo = KMeans(n_clusters=numero_clusters)
  modelo.fit(generos)
  return[numero_clusters, modelo.inertia_]

help(20,generos_scalados)

result_help_erro = [help(numero_grupos, generos_scalados) for numero_grupos in range(1, 41)] 
result_help_erro

resultado_erro = pd.DataFrame(result_help_erro,
             columns=['grupo', 'inertia'])
resultado_erro

resultado_erro.inertia.plot(xticks=resultado_erro.grupo)

modelo = KMeans(n_clusters=15)
modelo.fit(generos_scalados)

grupos = pd.DataFrame(modelo.cluster_centers_,
             columns=generos.columns)

grupos.transpose().plot.bar(subplots=True, 
                        figsize=(25,50),
                        sharex=False,
                        rot=0)

modelo = AgglomerativeClustering(n_clusters=15)
grupos =  modelo.fit_predict(generos_scalados)
grupos

tsne = TSNE()

visu = tsne.fit_transform(generos_scalados)
visu

sns.scatterplot(x=visu[:,0],
                y=visu[:,1],
                hue=grupos,
                palette=sns.color_palette("Set1", 15))

modelo = KMeans(n_clusters=15)
modelo.fit(generos_scalados)

grupos = pd.DataFrame(modelo.cluster_centers_,
             columns=generos.columns)

grupos.transpose().plot.bar(subplots=True, 
                        figsize=(25,50),
                        sharex=False,
                        rot=0)

matriz_distancia = linkage(grupos)
matriz_distancia

dendrograma = dendrogram(matriz_distancia)
dendrograma
